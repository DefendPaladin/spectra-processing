{"version":3,"file":"ml-spectra-processing.js","sources":["../node_modules/is-any-array/src/index.js","../lib/index.js"],"sourcesContent":["'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst isAnyArray = require('is-any-array');\n\n/**\n * Throw an error in no an object of x,y arrays\n * @param {object} [points={}]\n */\nfunction check(points = {}) {\n  if (!isAnyArray(points.x) || !isAnyArray(points.y)) {\n    throw new Error('Points must be an object of x and y arrays');\n  }\n  if (points.x.length !== points.y.length) {\n    throw new Error('The x and y arrays mush have the same length');\n  }\n}\n\n/**\n * Returns the closest index of a `target` in an ordered array\n * @param {array} array\n * @param {number} target\n */\n\nfunction findClosestIndex(array, target) {\n  let low = 0;\n  let high = array.length - 1;\n  let middle = 0;\n  while (high - low > 1) {\n    middle = low + ((high - low) >> 1);\n    if (array[middle] < target) {\n      low = middle;\n    } else if (array[middle] > target) {\n      high = middle;\n    } else {\n      return middle;\n    }\n  }\n\n  if (low < array.length - 1) {\n    if (Math.abs(target - array[low]) < Math.abs(array[low + 1] - target)) {\n      return low;\n    } else {\n      return low + 1;\n    }\n  } else {\n    return low;\n  }\n}\n\n/**\n * Returns an object with {fromIndex, toIndex} for a specific from / to\n * @param {array} x\n * @param {object} [options={}]\n * @param {number} [options.from] - First value for integration in the X scale\n * @param {number} [options.fromIndex=0] - First point for integration\n * @param {number} [options.to] - Last value for integration in the X scale\n * @param {number} [options.toIndex=x.length-1] - Last point for integration\n */\n\nfunction getFromToIndex(x, options = {}) {\n  let { fromIndex, toIndex, from, to } = options;\n\n  if (fromIndex === undefined) {\n    if (from !== undefined) {\n      fromIndex = findClosestIndex(x, from);\n    } else {\n      fromIndex = 0;\n    }\n  }\n  if (toIndex === undefined) {\n    if (to !== undefined) {\n      toIndex = findClosestIndex(x, to);\n    } else {\n      toIndex = x.length - 1;\n    }\n  }\n  return { fromIndex, toIndex };\n}\n\n/**\n * In place modification of the 2 arrays to make X unique and sum the Y if X has the same value\n * @param {object} [points={}] - Object of points contains property x (an ordered increasing array) and y (an array)\n * @param {object} [options={}]\n * @param {number} [options.from] - First value for integration in the X scale\n * @param {number} [options.fromIndex=0] - First point for integration\n * @param {number} [options.to] - Last value for integration in the X scale\n * @param {number} [options.toIndex=x.length-1] - Last point for integration\n * @return {number} Integration value on the specified range\n */\n\nfunction integration(points = {}, options = {}) {\n  check(points);\n  const { x, y } = points;\n  if (x.length < 2) return 0;\n  const { fromIndex, toIndex } = getFromToIndex(x, options);\n  let integration = 0;\n  for (let i = fromIndex; i < toIndex; i++) {\n    integration += ((x[i + 1] - x[i]) * (y[i + 1] + y[i])) / 2;\n  }\n\n  return integration;\n}\n\n/**\n * Generate a X / Y of the integral\n * @param {object} [points={}] - Object of points contains property x (an ordered increasing array) and y (an array)\n * @param {object} [options={}]\n * @param {number} [options.from] - First value for integration in the X scale\n * @param {number} [options.fromIndex=0] - First point for integration\n * @param {number} [options.to] - Last value for integration in the X scale\n * @param {number} [options.toIndex=x.length-1] - Last point for integration\n * @param {boolean} [options.reverse=false] - Integrate from the larger value to the smallest value\n * @return {{x:[],y:[]}} An object with the integration function\n */\n\nfunction integral(points = {}, options = {}) {\n  const { reverse = false } = options;\n  check(points);\n  const { x, y } = points;\n  if (x.length < 2) return 0;\n\n  const { fromIndex, toIndex } = getFromToIndex(x, options);\n\n  let integration = 0;\n  let integral;\n  if (reverse) {\n    integral = { x: [x[toIndex]], y: [0] };\n    for (let i = toIndex; i > fromIndex; i--) {\n      integration += ((x[i] - x[i - 1]) * (y[i - 1] + y[i])) / 2;\n      integral.x.push(x[i - 1]);\n      integral.y.push(integration);\n    }\n    integral.x.reverse();\n    integral.y.reverse();\n  } else {\n    integral = { x: [x[fromIndex]], y: [0] };\n    for (let i = fromIndex; i < toIndex; i++) {\n      integration += ((x[i + 1] - x[i]) * (y[i + 1] + y[i])) / 2;\n      integral.x.push(x[i + 1]);\n      integral.y.push(integration);\n    }\n  }\n\n  return integral;\n}\n\n/**\n * Finds the max value in a zone\n * @param {object} [points={}] - Object of points contains property x (an ordered increasing array) and y (an array)\n * @param {object} [options={}]\n * @param {number} [options.from] - First value for integration in the X scale\n * @param {number} [options.fromIndex=0] - First point for integration\n * @param {number} [options.to] - Last value for integration in the X scale\n * @param {number} [options.toIndex=x.length-1] - Last point for integration\n * @return {number} Max y on the specified range\n */\n\nfunction maxY(points = {}, options = {}) {\n  check(points);\n  const { x, y } = points;\n  if (x.length < 2) return 0;\n\n  const { fromIndex, toIndex } = getFromToIndex(x, options);\n\n  let maxY = y[fromIndex];\n  for (let i = fromIndex; i <= toIndex; i++) {\n    if (y[i] > maxY) maxY = y[i];\n  }\n\n  return maxY;\n}\n\n/**\n * Finds the max y value in a range and return a {x,y} point\n * @param {object} [points={}] - Object of points contains property x (an ordered increasing array) and y (an array)\n * @param {object} [options={}]\n * @param {number} [options.from] - First value for integration in the X scale\n * @param {number} [options.fromIndex=0] - First point for integration\n * @param {number} [options.to] - Last value for integration in the X scale\n * @param {number} [options.toIndex=x.length-1] - Last point for integration\n * @return {object}\n */\n\nfunction maxYPoint(points = {}, options = {}) {\n  check(points);\n  const { x, y } = points;\n  if (x.length < 2) return 0;\n\n  const { fromIndex, toIndex } = getFromToIndex(x, options);\n\n  let current = { x: x[fromIndex], y: y[fromIndex] };\n  for (let i = fromIndex; i <= toIndex; i++) {\n    if (y[i] > current.y) current = { x: x[i], y: y[i] };\n  }\n\n  return current;\n}\n\n/**\n * Finds the max y value in a range and return a {x,y} point\n * @param {object} [points={}] - Object of points contains property x (an ordered increasing array) and y (an array)\n * @param {object} [options={}]\n * @param {number} [options.from] - First value for integration in the X scale\n * @param {number} [options.fromIndex=0] - First point for integration\n * @param {number} [options.to] - Last value for integration in the X scale\n * @param {number} [options.toIndex=x.length-1] - Last point for integration\n * @return {object}\n */\n\nfunction minYPoint(points = {}, options = {}) {\n  check(points);\n  const { x, y } = points;\n  if (x.length < 2) return 0;\n\n  const { fromIndex, toIndex } = getFromToIndex(x, options);\n\n  let current = { x: x[fromIndex], y: y[fromIndex] };\n  for (let i = fromIndex; i <= toIndex; i++) {\n    if (y[i] < current.y) current = { x: x[i], y: y[i] };\n  }\n\n  return current;\n}\n\n/**\n * Reduce the number of points while keeping the same noise. Practical to\n * display many spectra as SVG\n * @param {array} x\n * @param {array} y\n * @param {object} [options={}]\n * @param {number} [from=x[0]]\n * @param {number} [to=x[x.length-1]]\n * @param {number} [nbPoints=4001] Number of points\n */\n\nfunction reduce(x, y, options = {}) {\n  let { from = x[0], to = x[x.length - 1], nbPoints = 4000 } = options;\n\n  let fromIndex = findClosestIndex(x, from);\n  let toIndex = findClosestIndex(x, to);\n\n  if (fromIndex > 0 && x[fromIndex] > from) fromIndex--;\n  if (toIndex < x.length - 1 && x[toIndex] < to) toIndex++;\n\n  if (toIndex - fromIndex < nbPoints) {\n    return {\n      x: x.slice(fromIndex, toIndex + 1),\n      y: y.slice(fromIndex, toIndex + 1),\n    };\n  }\n\n  let newX = [x[fromIndex]];\n  let newY = [y[fromIndex]];\n  let minY = Number.MAX_VALUE;\n  let maxY = Number.MIN_VALUE;\n  if (nbPoints % 2 === 0) {\n    nbPoints = nbPoints / 2 + 1;\n  } else {\n    nbPoints = (nbPoints - 1) / 2 + 1;\n  }\n\n  let slot = (x[toIndex] - x[fromIndex]) / (nbPoints - 1);\n  let currentX = x[fromIndex] + slot;\n  let first = true;\n  for (let i = fromIndex + 1; i <= toIndex; i++) {\n    if (first) {\n      minY = y[i];\n      maxY = y[i];\n      first = false;\n    } else {\n      if (y[i] < minY) minY = y[i];\n      if (y[i] > maxY) maxY = y[i];\n    }\n\n    if (x[i] >= currentX || i === toIndex) {\n      newX.push(currentX - slot / 2);\n      newY.push(minY);\n      newX.push(currentX);\n      newY.push(maxY);\n      currentX += slot;\n      first = true;\n    }\n  }\n\n  // we will need to make some kind of min / max because there are too many points\n  // we will always keep the first point and the last point\n\n  return { x: newX, y: newY };\n}\n\n/**\n * Sort object of array, x has to be monotone.\n * @param {object} data Object of kind {x:[], re:[], im:[]}.\n * @return {SD}\n */\n\nfunction sortX(data) {\n  const { x, y } = data;\n\n  if (x.length !== y.length) {\n    throw TypeError('sortX: length of x and y must be identical');\n  }\n\n  if (x.length < 2 || x[0] < x[1]) return data;\n\n  return {\n    x: x.slice(0).reverse(),\n    y: y.slice(0).reverse(),\n  };\n}\n\n/**\n * Find the closest minimum going down hill\n * @param {object} [points={}] - Object of points contains property x (an ordered increasing array) and y (an array)\n * @param {object} [options={}]\n * @param {number} [options.target]\n * @param {number} [options.targetIndex=0]\n * @return {{x,y,xIndex}} An object with the x/y value\n */\n\nfunction minClosestYPoint(points, options = {}) {\n  check(points);\n  const { x, y } = points;\n\n  let { target, targetIndex } = options;\n\n  if (targetIndex === undefined) {\n    if (target !== undefined) {\n      targetIndex = findClosestIndex(x, target);\n    } else {\n      targetIndex = 0;\n    }\n  }\n\n  let previousIndex = Number.MIN_SAFE_INTEGER;\n  let currentIndex = targetIndex;\n\n  let minY = y[targetIndex];\n\n  while (currentIndex !== previousIndex) {\n    previousIndex = currentIndex;\n    if (currentIndex > 0 && y[currentIndex - 1] < minY) {\n      currentIndex--;\n    } else if (currentIndex < x.length - 1 && y[currentIndex + 1] < minY) {\n      currentIndex++;\n    }\n    minY = y[currentIndex];\n  }\n  return {\n    x: x[currentIndex],\n    y: y[currentIndex],\n    index: currentIndex,\n  };\n}\n\n/**\n * Find the closest maximum going up hill\n * @param {object} [points={}] - Object of points contains property x (an ordered increasing array) and y (an array)\n * @param {object} [options={}]\n * @param {number} [options.target]\n * @param {number} [options.targetIndex=0]\n * @return {{x,y,xIndex}} An object with the x/y value\n */\n\nfunction maxClosestYPoint(points, options = {}) {\n  check(points);\n  const { x, y } = points;\n\n  let { target, targetIndex } = options;\n\n  if (targetIndex === undefined) {\n    if (target !== undefined) {\n      targetIndex = findClosestIndex(x, target);\n    } else {\n      targetIndex = 0;\n    }\n  }\n\n  let previousIndex = Number.MIN_SAFE_INTEGER;\n  let currentIndex = targetIndex;\n\n  let maxY = y[targetIndex];\n\n  while (currentIndex !== previousIndex) {\n    previousIndex = currentIndex;\n    if (currentIndex > 0 && y[currentIndex - 1] > maxY) {\n      currentIndex--;\n    } else if (currentIndex < x.length - 1 && y[currentIndex + 1] > maxY) {\n      currentIndex++;\n    }\n    maxY = y[currentIndex];\n  }\n  return {\n    x: x[currentIndex],\n    y: y[currentIndex],\n    index: currentIndex,\n  };\n}\n\n/**\n *  Returns the targetIndex\n * @param {array} [x]\n * @param {object} [options={}]\n * @param {number} [options.target]\n * @param {number} [options.targetIndex=0]\n * @param {number}\n */\n\nfunction getTargetIndex(x, options = {}) {\n  let { target, targetIndex } = options;\n  if (targetIndex === undefined) {\n    if (target !== undefined) {\n      return findClosestIndex(x, target);\n    } else {\n      return 0;\n    }\n  }\n  return targetIndex;\n}\n\nfunction realMinYPoint(points, options = {}) {\n  check(points);\n  const { x, y } = points;\n\n  const targetIndex = getTargetIndex(x, options);\n  // interpolation to a sin() function\n  if (\n    y[targetIndex - 1] < 0 &&\n    y[targetIndex + 1] < 0 &&\n    y[targetIndex] <= y[targetIndex - 1] &&\n    y[targetIndex] <= y[targetIndex + 1]\n  ) {\n    let alpha = 20 * Math.log10(-y[targetIndex - 1]);\n    let beta = 20 * Math.log10(-y[targetIndex]);\n    let gamma = 20 * Math.log10(-y[targetIndex + 1]);\n    let p = (0.5 * (alpha - gamma)) / (alpha - 2 * beta + gamma);\n    return {\n      x: x[targetIndex] + (x[targetIndex] - x[targetIndex - 1]) * p,\n      y: y[targetIndex] - 0.25 * (y[targetIndex - 1] - y[targetIndex + 1]) * p,\n      index: targetIndex,\n    };\n  } else {\n    return {\n      x: x[targetIndex],\n      y: y[targetIndex],\n      index: targetIndex,\n    };\n  }\n}\n\n/**\n * Find the closest minimum going down hill\n * @param {object} [points={}] - Object of points contains property x (an ordered increasing array) and y (an array)\n * @param {object} [options={}]\n * @param {number} [options.target]\n * @param {number} [options.targetIndex=0]\n * @return {{x,y,xIndex}} An object with the x/y value\n */\n\nfunction realMaxYPoint(points, options = {}) {\n  check(points);\n  const { x, y } = points;\n  const targetIndex = getTargetIndex(x, options);\n  // interpolation to a sin() function\n  if (\n    y[targetIndex - 1] > 0 &&\n    y[targetIndex + 1] > 0 &&\n    y[targetIndex] >= y[targetIndex - 1] &&\n    y[targetIndex] >= y[targetIndex + 1]\n  ) {\n    let alpha = 20 * Math.log10(y[targetIndex - 1]);\n    let beta = 20 * Math.log10(y[targetIndex]);\n    let gamma = 20 * Math.log10(y[targetIndex + 1]);\n    let p = (0.5 * (alpha - gamma)) / (alpha - 2 * beta + gamma);\n    return {\n      x: x[targetIndex] + (x[targetIndex] - x[targetIndex - 1]) * p,\n      y: y[targetIndex] - 0.25 * (y[targetIndex - 1] - y[targetIndex + 1]) * p,\n      index: targetIndex,\n    };\n  } else {\n    return {\n      x: x[targetIndex],\n      y: y[targetIndex],\n      index: targetIndex,\n    };\n  }\n}\n\n/**\n * Finds all the max values\n * If the values are equal the middle\n * of the equal part will be the position of the signal!\n *\n * @param {object} [points={}] - Object of points contains property x (an ordered increasing array) and y (an array)\n * @return {Array} Array of points\n */\n\nfunction maximaY(points = {}) {\n  check(points);\n  const { x, y } = points;\n  if (x.length < 3) return [];\n  let maxima = [];\n  let startEqualIndex = -1;\n  for (let i = 1; i < x.length - 1; i++) {\n    if (y[i - 1] < y[i] && y[i + 1] < y[i]) {\n      maxima.push({ x: x[i], y: y[i], index: i });\n    } else if (y[i - 1] < y[i] && y[i + 1] === y[i]) {\n      startEqualIndex = i;\n    } else if (y[i - 1] === y[i] && y[i + 1] < y[i]) {\n      let index = ((i + startEqualIndex) / 2) >> 0;\n      maxima.push({ x: x[index], y: y[index], index });\n    }\n  }\n  return maxima;\n}\n\n/**\n * Finds all the min values\n * If the values are equal the middle\n * of the equal part will be the position of the signal!\n *\n * @param {object} [points={}] - Object of points contains property x (an ordered increasing array) and y (an array)\n * @return {Array} Array of points\n */\n\nfunction minimaY(points = {}) {\n  check(points);\n  const { x, y } = points;\n  if (x.length < 3) return [];\n  let maxima = [];\n  let startEqualIndex = -1;\n  for (let i = 1; i < x.length - 1; i++) {\n    if (y[i - 1] > y[i] && y[i + 1] > y[i]) {\n      maxima.push({ x: x[i], y: y[i], index: i });\n    } else if (y[i - 1] > y[i] && y[i + 1] === y[i]) {\n      startEqualIndex = i;\n    } else if (y[i - 1] === y[i] && y[i + 1] > y[i]) {\n      let index = ((i + startEqualIndex) / 2) >> 0;\n      maxima.push({ x: x[index], y: y[index], index });\n    }\n  }\n  return maxima;\n}\n\n/**\n * Returns an information about a signal\n *\n * We expect ordered data and equidistant X axis\n * You can use the method helper if required:\n * ML.ArrayXY.uniqueX\n * ML.ArrayXY.sortX\n * ML.ArrayXY.equallySpaced\n *\n * @param {object} [points={}] - Object of points contains property x (an ordered increasing array) and y (an array)\n * @param {object} [options={}]\n * @param {number} [options.target]\n * @param {number} [options.targetIndex]\n * @return {object} Information about signal\n */\n\nfunction peakInfo(points = {}, options = {}) {\n  check(points);\n  const { x, y } = points;\n  if (x.length < 3) return undefined;\n  let { targetIndex, target } = options;\n  if (targetIndex === undefined) {\n    if (target !== undefined) {\n      targetIndex = findClosestIndex(x, target);\n    }\n  }\n\n  if (targetIndex === undefined) {\n    throw new Error('peakInfo: need to specify target or targetIndex');\n  }\n\n  let i = targetIndex;\n  let currentDiff = y[i] - y[i + 1];\n\n  let multiplier = currentDiff < 0 ? -1 : 1;\n  currentDiff *= multiplier;\n  while (i < x.length - 1) {\n    i++;\n    let newDiff = (y[i] - y[i + 1]) * multiplier;\n    if (newDiff < currentDiff) break;\n    currentDiff = newDiff;\n  }\n  let after = { x: x[i], y: y[i] };\n\n  i = targetIndex;\n  currentDiff = (y[i] - y[i - 1]) * multiplier;\n  while (i > 1) {\n    i--;\n    let newDiff = (y[i] - y[i - 1]) * multiplier;\n    if (newDiff < currentDiff) break;\n    currentDiff = newDiff;\n  }\n  let before = { x: x[i], y: y[i] };\n\n  return {\n    inflectionBefore: before,\n    inflectionAfter: after,\n    extrema: { x: x[targetIndex], y: y[targetIndex] },\n    inflectionMiddle: {\n      x: (before.x + after.x) / 2,\n      y: (before.y + after.y) / 2,\n    },\n    width: Math.abs(before.x - after.x),\n  };\n}\n\nconst XY = {\n  check,\n  integral,\n  integration,\n  maxY,\n  maximaY,\n  maxYPoint,\n  minimaY,\n  minYPoint,\n  reduce,\n  sortX,\n  minClosestYPoint,\n  maxClosestYPoint,\n  realMaxYPoint,\n  realMinYPoint,\n  peakInfo,\n};\n\n/**\n * This function make a zero filling to re and im part.\n * @param {object} data Object of kind {x:[], re:[], im:[]}.\n * @param {number} zeroFilling - final number of points\n * @return {SD}\n */\nfunction zeroFilling(data, zeroFilling) {\n  let length = data.x.length;\n  if (zeroFilling === 0 || length === zeroFilling) return data;\n\n  if (length > zeroFilling) {\n    return {\n      x: data.x.slice(0, zeroFilling),\n      re: data.re.slice(0, zeroFilling),\n      im: data.im.slice(0, zeroFilling),\n    };\n  }\n\n  const x = data.x;\n  const re = data.re;\n  const im = data.im;\n\n  const newX = new Float64Array(zeroFilling);\n  const newRE = new Float64Array(zeroFilling);\n  const newIM = new Float64Array(zeroFilling);\n\n  for (let i = 0; i < length; i++) {\n    newX[i] = x[i];\n    newRE[i] = re[i];\n    newIM[i] = im[i];\n  }\n  const deltaX = (x[x.length - 1] - x[0]) / (length - 1);\n  for (let i = length; i < zeroFilling; i++) {\n    newX[i] = newX[i - 1] + deltaX;\n  }\n\n  return {\n    x: newX,\n    re: newRE,\n    im: newIM,\n  };\n}\n\n/**\n * Sort object of array, x has to be monotone.\n * @param {object} data Object of kind {x:[], re:[], im:[]}.\n * @return {SD}\n */\n\nfunction sortX$1(data) {\n  const { x, re, im } = data;\n\n  if (x.length !== re.length || x.length !== im.length) {\n    throw TypeError('sortX: length of x, re and im must be identical');\n  }\n\n  if (x.length < 2 || x[0] < x[1]) return data;\n\n  return {\n    x: x.slice(0).reverse(),\n    re: re.slice(0).reverse(),\n    im: im.slice(0).reverse(),\n  };\n}\n\nconst XReIm = {\n  zeroFilling,\n  sortX: sortX$1,\n};\n\n/**\n * Calculate absolute value of a spectrum\n * @param {object} reim - An object of kind {re:[], im:[]}\n * @return {Float64Array}\n */\nfunction absolute(data) {\n  const length = data.re.length;\n  const re = data.re;\n  const im = data.im;\n  const newArray = new Float64Array(length);\n  for (let i = 0; i < length; i++) {\n    newArray[i] = Math.sqrt(re[i] ** 2 + im[i] ** 2);\n  }\n\n  return newArray;\n}\n\n/**\n * Phase correction filter\n * @param {object} reim - An object of kind {re:[], im:[]}\n * @param {number} [phi0 = 0] - value\n * @param {number} [phi1 = 0] - value\n * @return {object} returns a new object {re:[], im:[]}\n */\nfunction phaseCorrection(data, phi0, phi1) {\n  phi0 = Number.isFinite(phi0) ? phi0 : 0;\n  phi1 = Number.isFinite(phi1) ? phi1 : 0;\n\n  const re = data.re.slice(0);\n  const im = data.im.slice(0);\n  const length = data.re.length;\n\n  const delta = phi1 / length;\n  const alpha = 2 * Math.pow(Math.sin(delta / 2), 2);\n  const beta = Math.sin(delta);\n  let cosTheta = Math.cos(phi0);\n  let sinTheta = Math.sin(phi0);\n\n  const newRe = new Float64Array(length);\n  const newIm = new Float64Array(length);\n  for (let i = 0; i < length; i++) {\n    newRe[i] = re[i] * cosTheta - im[i] * sinTheta;\n    newIm[i] = re[i] * sinTheta + im[i] * cosTheta;\n    // calculate angles i+1 from i\n    cosTheta = cosTheta - (alpha * cosTheta + beta * sinTheta);\n    sinTheta = sinTheta - (alpha * sinTheta - beta * cosTheta);\n  }\n\n  return { re: newRe, im: newIm };\n}\n\nconst ReIm = {\n  absolute,\n  phaseCorrection,\n};\n\n/**\n\n/**\n * This function add the first array by the second array or a constant value to each element of the first array\n * @param {Array} array1 - the array that will be rotated\n * @param {Array|Number} array2\n * @return {Array}\n */\nfunction add(array1, array2) {\n  let isConstant = false;\n  let constant;\n  if (Array.isArray(array2)) {\n    if (array1.length !== array2.length) {\n      throw new Error('sub: size of array1 and array2 must be identical');\n    }\n  } else {\n    isConstant = true;\n    constant = Number(array2);\n  }\n\n  let array3 = new Array(array1.length);\n  if (isConstant) {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] + constant;\n    }\n  } else {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] + array2[i];\n    }\n  }\n\n  return array3;\n}\n\n/**\n * This function subtract the first array by the second array or a constant value from each element of the first array\n * @param {Array} array1 - the array that will be rotated\n * @return {object}\n */\nfunction boxPlot(array) {\n  array = array.slice(0).sort((a, b) => a - b);\n  if (array.length < 5) {\n    throw Error(\n      'boxPlot: can not calculate info if array contains less than 3 elements',\n    );\n  }\n  let info = {\n    Q1: 0.0,\n    Q2: 0.0,\n    Q3: 0.0,\n    min: array[0],\n    max: array[array.length - 1],\n  };\n  let q1max, q3min;\n  if (array.length % 2 === 1) {\n    // odd\n    let middle = (array.length - 1) / 2;\n    info.Q2 = array[middle];\n    q1max = middle - 1;\n    q3min = middle + 1;\n  } else {\n    // even\n    q3min = array.length / 2;\n    q1max = q3min - 1;\n    info.Q2 = (array[q1max] + array[q3min]) / 2;\n  }\n  if (q1max % 2 === 0) {\n    info.Q1 = array[q1max / 2];\n    info.Q3 = array[(array.length + q3min - 1) / 2];\n  } else {\n    info.Q1 = (array[(q1max + 1) / 2] + array[(q1max - 1) / 2]) / 2;\n    let middleOver = (array.length + q3min) / 2;\n    info.Q3 = (array[middleOver] + array[middleOver - 1]) / 2;\n  }\n  return info;\n}\n\n/**\n\n/**\n * This function divide the first array by the second array or a constant value to each element of the first array\n * @param {Array} array1 - the array that will be rotated\n * @param {Array|Number} array2\n * @return {Array}\n */\nfunction divide(array1, array2) {\n  let isConstant = false;\n  let constant;\n  if (Array.isArray(array2)) {\n    if (array1.length !== array2.length) {\n      throw new Error('sub: size of array1 and array2 must be identical');\n    }\n  } else {\n    isConstant = true;\n    constant = Number(array2);\n  }\n\n  let array3 = new Array(array1.length);\n  if (isConstant) {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] / constant;\n    }\n  } else {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] / array2[i];\n    }\n  }\n\n  return array3;\n}\n\n/**\n\n/**\n * This function multiply the first array by the second array or a constant value to each element of the first array\n * @param {Array} array1 - the array that will be rotated\n * @param {Array|Number} array2\n * @return {Array}\n */\nfunction multiply(array1, array2) {\n  let isConstant = false;\n  let constant;\n  if (Array.isArray(array2)) {\n    if (array1.length !== array2.length) {\n      throw new Error('sub: size of array1 and array2 must be identical');\n    }\n  } else {\n    isConstant = true;\n    constant = Number(array2);\n  }\n\n  let array3 = new Array(array1.length);\n  if (isConstant) {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] * constant;\n    }\n  } else {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] * array2[i];\n    }\n  }\n\n  return array3;\n}\n\n/**\n * This function performs a circular shift to a new array\n * Positive values of shifts will shift to the right and negative values will do to the left\n * @example rotate([1,2,3,4],1) -> [4,1,2,3]\n * @example rotate([1,2,3,4],-1) -> [2,3,4,1]\n * @param {Array} array - the array that will be rotated\n * @param {number} shift\n * @return {Array}\n */\nfunction rotate(array, shift) {\n  shift = shift % array.length;\n  if (shift < 0) shift += array.length;\n  return array\n    .slice(array.length - shift)\n    .concat(array.slice(0, array.length - shift));\n}\n\n/**\n * This function subtract the first array by the second array or a constant value from each element of the first array\n * @param {Array} array1 - the array that will be rotated\n * @param {Array|Number} array2\n * @return {Array}\n */\nfunction subtract(array1, array2) {\n  let isConstant = false;\n  let constant;\n  if (Array.isArray(array2)) {\n    if (array1.length !== array2.length) {\n      throw new Error('sub: size of array1 and array2 must be identical');\n    }\n  } else {\n    isConstant = true;\n    constant = Number(array2);\n  }\n\n  let array3 = new Array(array1.length);\n  if (isConstant) {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] - constant;\n    }\n  } else {\n    for (let i = 0; i < array1.length; i++) {\n      array3[i] = array1[i] - array2[i];\n    }\n  }\n\n  return array3;\n}\n\n/**\n\n/**\n * Calculates the correlation between 2 vectors\n * https://en.wikipedia.org/wiki/Correlation_and_dependence\n *\n * @param {Array} [A] - the array that will be rotated\n * @param {Array} [B]\n * @return {Array}\n */\nfunction correlation(A, B) {\n  let n = A.length;\n  let sumA = 0;\n  let sumA2 = 0;\n  let sumB = 0;\n  let sumB2 = 0;\n  let sumAB = 0;\n  for (let i = 0; i < n; i++) {\n    let a = A[i];\n    let b = B[i];\n    sumA += a;\n    sumA2 += a ** 2;\n    sumB += b;\n    sumB2 += b ** 2;\n    sumAB += a * b;\n  }\n  return (\n    (n * sumAB - sumA * sumB) /\n    (Math.sqrt(n * sumA2 - sumA ** 2) * Math.sqrt(n * sumB2 - sumB ** 2))\n  );\n}\n\nconst X = {\n  add,\n  boxPlot,\n  divide,\n  findClosestIndex,\n  getTargetIndex,\n  multiply,\n  rotate,\n  subtract,\n  correlation,\n};\n\nexports.ReIm = ReIm;\nexports.X = X;\nexports.XReIm = XReIm;\nexports.XY = XY;\n"],"names":["toString","Object","prototype","isAnyArray","object","call","endsWith","defineProperty","exports","value","check","points","x","y","Error","length","findClosestIndex","array","target","low","high","middle","Math","abs","getFromToIndex","options","fromIndex","toIndex","from","to","undefined","integration","i","integral","reverse","push","maxY","maxYPoint","current","minYPoint","reduce","nbPoints","slice","newX","newY","minY","Number","MAX_VALUE","MIN_VALUE","slot","currentX","first","sortX","data","TypeError","minClosestYPoint","targetIndex","previousIndex","MIN_SAFE_INTEGER","currentIndex","index","maxClosestYPoint","getTargetIndex","realMinYPoint","alpha","log10","beta","gamma","p","realMaxYPoint","maximaY","maxima","startEqualIndex","minimaY","peakInfo","currentDiff","multiplier","newDiff","after","before","inflectionBefore","inflectionAfter","extrema","inflectionMiddle","width","XY","zeroFilling","re","im","Float64Array","newRE","newIM","deltaX","sortX$1","XReIm","absolute","newArray","sqrt","phaseCorrection","phi0","phi1","isFinite","delta","pow","sin","cosTheta","cos","sinTheta","newRe","newIm","ReIm","add","array1","array2","isConstant","constant","Array","isArray","array3","boxPlot","sort","a","b","info","Q1","Q2","Q3","min","max","q1max","q3min","middleOver","divide","multiply","rotate","shift","concat","subtract","correlation","A","B","n","sumA","sumA2","sumB","sumB2","sumAB","X"],"mappings":"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"}